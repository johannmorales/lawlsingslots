/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as Slots1IndexImport } from './routes/slots/1/index'

// Create Virtual Routes

const Slots2IndexLazyImport = createFileRoute('/slots/2/')()

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const Slots2IndexLazyRoute = Slots2IndexLazyImport.update({
  path: '/slots/2/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/slots/2/index.lazy').then((d) => d.Route))

const Slots1IndexRoute = Slots1IndexImport.update({
  path: '/slots/1/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/slots/1/': {
      id: '/slots/1/'
      path: '/slots/1'
      fullPath: '/slots/1'
      preLoaderRoute: typeof Slots1IndexImport
      parentRoute: typeof rootRoute
    }
    '/slots/2/': {
      id: '/slots/2/'
      path: '/slots/2'
      fullPath: '/slots/2'
      preLoaderRoute: typeof Slots2IndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/slots/1': typeof Slots1IndexRoute
  '/slots/2': typeof Slots2IndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/slots/1': typeof Slots1IndexRoute
  '/slots/2': typeof Slots2IndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/slots/1/': typeof Slots1IndexRoute
  '/slots/2/': typeof Slots2IndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/slots/1' | '/slots/2'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/slots/1' | '/slots/2'
  id: '__root__' | '/' | '/slots/1/' | '/slots/2/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  Slots1IndexRoute: typeof Slots1IndexRoute
  Slots2IndexLazyRoute: typeof Slots2IndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  Slots1IndexRoute: Slots1IndexRoute,
  Slots2IndexLazyRoute: Slots2IndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/slots/1/",
        "/slots/2/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/slots/1/": {
      "filePath": "slots/1/index.tsx"
    },
    "/slots/2/": {
      "filePath": "slots/2/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
